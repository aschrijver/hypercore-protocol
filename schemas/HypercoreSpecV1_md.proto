/**
 * The **SLEEP** format is designed by the [Dat Project](https://datproject.org) 
 * to allow for sparse replication, meaning you can efficiently download
 * only the metadata and data required to resolve a single byte region 
 * of a single file, which makes Dat suitable for a wide variety of streaming,
 * _real-time_ and large dataset use cases.
 *
 * To take advantage of this, Dat includes a _network protocol_. It is message
 * based and stateless, making it possible to implement on a variety of network
 * transport protocols including UDP and TCP.
 *
 * Both metadata and content registers in **SLEEP** share the exact same
 * replication protocol.
 *
 * Individual messages are encoded using Protocol Buffers and there are ten
 * message types in total.
 *
 * ### Wire Protocol
 *
 * Over the wire messages are packed in the following lightweight
 * container format:
 *
 * ```
 * <varint - length of rest of message>
 *   <varint - header>
 *   <message>
 * ```
 *
 * The `header` value is a single `varint` that has two pieces of information,
 * the integer type that declares a 4-bit message type (used below), and a
 * channel identifier, 0 for metadata and 1 for content.
 *
 * To generate this varint, you bitshift the 4-bit type integer onto the end of
 * the channel identifier, e.g. channel << 4 | <4-bit-type>.
 *
 * ### Using in NodeJS
 *
 * The `protocol-bufers` package offers an intuitive javascript API, so you need
 * not worry about low-level protocol concepts.
 * 
 * This example demonstrates how you create a feed and start streaming:
 *
 * ```javascript
 *   var protocol = require('hypercore-protocol')
 *   var stream = protocol()
 *   
 *   // open a feed specified by a 32 byte key
 *   var feed = stream.feed(Buffer('deadbeefdeadbeefdeadbeefdeadbeef'))
 *   
 *   feed.request({block: 42})
 *   feed.on('data', function (message) {
 *     console.log(message) // contains message.index and message.value
 *   })
 *   
 *   stream.pipe(anotherStream).pipe(stream)
 * ```
 */

/**
 * Type 0. Should be the first message sent on a channel.
 *
 * ```javascript
 * message Feed {
 *   required bytes discoveryKey = 1;
 *   optional bytes nonce = 2;
 * }
 * ```
 */
message Feed {

  /**
   * A BLAKE2b keyed hash of the string 'hypercore' using the public key of
   * the metadata register as the key
   */
  required bytes discoveryKey = 1;

  /** 32 bytes of random binary data, used in our encryption scheme */
  optional bytes nonce = 2;
}

/**
 * Type 1. Overall connection handshake. Should be sent just after the
 * Feed message on the first channel only (metadata).
 *
 * ```javascript
 * message Handshake {
 *   optional bytes id = 1;
 *   optional bool live = 2;
 *   optional bytes userData = 3;
 *   repeated string extensions = 4;
 * }
 * ```
 */
message Handshake {

  /**
   * 32 byte random data used as a identifier for this peer on the network,
   * useful for checking if you are connected to yourself or another peer
   * more than once
   */
  optional bytes id = 1;

  /**
   * Whether or not you want to operate in live (continuous) replication mode
   * or end after the initial sync. Both ends must agree to keep the
   * connection open
   */
  optional bool live = 2;

  /** User-specific metadata encoded as a byte sequence */
  optional bytes userData = 3;

  /** List of extensions that are supported on this Feed */
  repeated string extensions = 4;
}

/**
 * Type 2. Message indicating state changes. Used to indicate whether you are
 * uploading and/or downloading.
 *
 * Initial state for uploading / downloading is true.
 * If both ends are not downloading and not live it is safe to consider
 * the stream ended.
 *
 * ```javascript
 * message Info {
 *   optional bool uploading = 1;
 *   optional bool downloading = 2;
 * }
 * ```
 */
message Info {
  optional bool uploading = 1;
  optional bool downloading = 2;
}

/**
 * Type 3. How you tell the other peer what chunks of data you have or don't
 * have.
 *
 * You should only send Have messages to peers who have expressed interest in
 * this region by sending Want messages.
 *
 * ```javascript 
 * message Have {
 *   required uint64 start = 1;
 *   optional uint64 length = 2 [default = 1];
 *   optional bytes bitfield = 3;
 * }
 * ```
 * 
 * When sending bitfields you must run length encode them. The encoded bitfield 
 * is a series of compressed and uncompressed bit sequences. All sequences start with 
 * a header that is a varint.
 * 
 * If the last bit is set in the varint (it is an odd number) then a header represents 
 * a compressed bit sequence.
 * 
 * ```javascript
 * compressed-sequence = varint(
 *   byte-length-of-sequence
 *   << 2 | bit << 1 | 1
 * )
 * ```
 * 
 * If the last bit is not set then a header represents an non compressed sequence
 * 
 * ```javascript
 * uncompressed-sequence = varint(
 *   byte-length-of-bitfield << 1 | 0
 * ) + (bitfield)
 * ```
 * 
 */
message Have {

  /**
   * If you only specify start, it means you are telling the other side you
   * only have 1 chunk at the position at the value in start
   */
  required uint64 start = 1;

  /**
   * If you specify length, you can describe a range of values that you have
   * all of, starting from start
   */
  optional uint64 length = 2 [default = 1]; // defaults to 1

  /**
   * If you would like to send a range of sparse data about haves/don't haves
   * via bitfield, relative to start
   */
  optional bytes bitfield = 3;
}

/**
 * Type 4. How you communicate that you deleted or removed a chunk you used to have.
 *
 * ```javascript
 * message Unhave {
 *   required uint64 start = 1;
 *   optional uint64 length = 2 [default = 1];
 * }
 * ```
 */
message Unhave {
  required uint64 start = 1;
  optional uint64 length = 2 [default = 1];
}

/**
 * Type 5. How you ask the other peer to subscribe you to Have messages for a region of chunks.
 *
 * 'What do we want?' Remote should start sending `Have` messages in this range.
 *
 * ```javascript
 * message Want {
 *   required uint64 start = 1;
 *   optional uint64 length = 2;
 * }
 * ```
 */
message Want {
  required uint64 start = 1;

  /** Defaults to `Infinity` or `feed.length` (if not `live`) */
  optional uint64 length = 2;
}

/**
 * Type 6. How you ask to unsubscribe from `Have` messages for a region of chunks from the 
 * other peer. You should only Unwant previously Wanted regions, but if you do `Unwant` 
 * something that hasn't been Wanted it won't have any effect. 
 * 
 * The `length` value defaults to `Infinity` or `feed.length` (if not `live`).
 * 
 * ```javascript
 * message Unwant {
 *   required uint64 start = 1;
 *   optional uint64 length = 2;
 * }
 * ```
 */
message Unwant {
  required uint64 start = 1;

  /** Defaults to `Infinity` or `feed.length` (if not `live`) */
  optional uint64 length = 2;
}

/**
 * Type 7. Request a single chunk of data.
 *
 * The nodes bitfield is an optional optimization to reduce the amount of duplicate nodes 
 * exchanged during the replication lifecycle. It indicates which parents you have or don't 
 * have. You have a maximum of 64 parents you can specify. Because `uint64` in Protocol Buffers
 * is implemented as a `varint`, over the wire this does not take up 64 bits in most cases.
 * 
 * The first bit is reserved to signify whether or not you need a signature in response. 
 * The rest of the bits represent whether or not you have (`1`) or don't have (`0`) the 
 * information at this node already.
 * The ordering is determined by walking parent, sibling up the tree all the way to the root.
 *
 * ```javascript
 * message Request {
 *   required uint64 index = 1;
 *   optional uint64 bytes = 2;
 *   optional bool hash = 3;
 *   optional uint64 nodes = 4;
 * }
 * ```
 */
message Request {

  /**
   * The chunk index for the chunk you want. You should only ask for indexes that you have 
   * received the `Have` messages for
   */
  required uint64 index = 1;

  /**
   * You can also optimistically specify a byte offset, and in the case the remote is able to 
   * resolve the chunk for this byte offset depending on their Merkle tree state, they will 
   * ignore the `index` and send the chunk that resolves for this byte offset instead. 
   * But if they cannot resolve the byte request, `index` will be used.
   */
  optional uint64 bytes = 2;

  /** If you only want the hash of the chunk and not the chunk data itself */
  optional bool hash = 3;

  /** A 64 bit long bitfield representing which parent nodes you have */
  optional uint64 nodes = 4;
}

/**
 * Type 8. Cancel a previous Request message that you haven't received yet.
 *
 * ```javascript
 * message Cancel {
 *   required uint64 index = 1;
 *   optional uint64 bytes = 2;
 *   optional bool hash = 3;
 * }
 * ```
 */
message Cancel {
  required uint64 index = 1;
  optional uint64 bytes = 2;
  optional bool hash = 3;
}

/**
 * Type 9. Sends a single chunk of data to the other peer. You can send it in response to a 
 * `Request` or unsolicited on it's own as a friendly gift. The data includes all of the 
 * Merkle tree parent nodes needed to verify the hash chain all the way up to the Merkle 
 * roots for this chunk.
 * 
 * Because you can produce the direct parents by hashing the chunk, 
 * only the roots and 'uncle' hashes are included (the siblings to all of the parent nodes).
 *
 * ```javascript
 * message Data {
 *   message Node {
 *     required uint64 index = 1;
 *     required bytes hash = 2;
 *     required uint64 size = 3;
 *   }
 *   required uint64 index = 1;
 *   optional bytes value = 2;
 *   repeated Node nodes = 3;
 *   optional bytes signature = 4;
 * }
 * ```
 */
message Data {
  message Node {
    required uint64 index = 1;
    required bytes hash = 2;
    required uint64 size = 3;
  }

  required uint64 index = 1;
  optional bytes value = 2;
  repeated Node nodes = 3;
  optional bytes signature = 4;
}

// type=15 (last massage) is an extension message
// that is encoded like this <varint user-type><payload>
